PEHeader :: struct {
    machine: u16
    number_of_sections: u16
    time_date_stamp: u32
    pointer_to_symbol_table: u32
    number_of_symbols: u32
    optional_header_size: u16
    characteristics: u16
}

/// Reference to a slice of bytes of size `size` in the PE file, starting at `rva`
PEReference :: struct {
    rva: u32
    size: u32
}

PEOptionalHeader :: struct {
    // standard fields
    magic: u16
    l_major: u8
    l_minor: u8
    code_size: u32
    initialized_data_size: u32
    uninitialized_data_size: u32
    entry_point_rva: u32
    base_of_code: u32
    base_of_data: u32

    // NT-specific fields
    image_base: u32
    section_alignment: u32
    file_alignment: u32
    os_major: u16
    os_minor: u16
    user_major: u16
    user_minor: u16
    subsys_major: u16
    subsys_minor: u16
    reserved: u32
    image_size: u32
    header_size: u32
    file_checksum: u32
    subsystem: u16
    dll_flags: u16
    stack_reserve_size: u32
    stack_commit_size: u32
    heap_reserve_size: u32
    heap_commit_size: u32
    loader_flags: u32
    number_of_data_directories: u32

    // Data directories
    export_table: PEReference
    import_table: PEReference
    resource_table: PEReference
    exception_table: PEReference
    certificate_table: PEReference
    base_relocation_table: PEReference
    debug_table: PEReference
    copyright_table: PEReference
    global_ptr_table: PEReference
    tls_table: PEReference
    load_config_table: PEReference
    bound_import_table: PEReference
    iat: PEReference
    delay_import_descriptor: PEReference
    cli_header: PEReference
    reserved_table: PEReference
}

PESectionHeader :: struct {
    // TODO: fixed size arrays
    name: u64
    virtual_size: u32
    virtual_address: u32
    size_of_raw_data: u32
    pointer_to_raw_data: u32
    pointer_to_relocations: u32
    pointer_to_linenumbers: u32
    number_of_relocations: u16
    number_of_linenumbers: u16
    characteristics: u32
}

CLIHeader :: struct {
    cb: u32
    major_runtime_version: u16
    minor_runtime_version: u16
    meta_data: PEReference
    flags: u32
    entry_point_token: u32
    resources: PEReference
    strong_name_signature: PEReference
    code_manager_table: PEReference
    v_table_fixups: PEReference
    export_address_table_jumps: PEReference
    managed_native_header: PEReference
}

PEFile :: struct {
    image: ByteSlice
    header: PEHeader*
    optional_header: PEOptionalHeader*
    sections: PESectionHeader*

    cli_header: CLIHeader*
    md_root: MDRoot

    // Headers for the metadata streams. A null `name` field indicates a nonexistent stream.
    // TODO: optionals.
    strings_header: MDStreamHeader
    user_strings_header: MDStreamHeader
    blob_header: MDStreamHeader
    guid_header: MDStreamHeader
    md_tables_header: MDStreamHeader

    md_tables_start: MDTablesStart
    md_tables_begin_location: u32 // The location of the first physical metadata table
}

MDRoot :: struct {
    part1: MDRootPart1*
    version: u8*
    part2: MDRootPart2*
    streams: u32 // file offset
}
MDRootPart1 :: struct {
    signature: u32
    major_version: u16
    minor_version: u16
    reserved: u32
    length: u32
}
MDRootPart2 :: struct {
    flags: u16
    number_of_streams: u16
}
MDStreamHeader :: struct {
    offset: u32
    size: u32
    name: u8*
}

MDTablesStart :: struct {
    reserved1: u32
    major_version: u8
    minor_version: u8
    heap_sizes: u8
    reserved2: u8
    valid: u64
    sorted: u64
    first_row_location: u32
}

// TODO: this could be a global constant after implementing the updated interpreter memory model
fn no_stream(): MDStreamHeader {
    MDStreamHeader { offset: 0, size: 0, name: 0 as usize as u8* }
}

fn get_section(file: PEFile*, index: u16): PESectionHeader* {
    if index >= file.header.number_of_sections {
        panic("index out of bounds")
    } 
    (file.sections as usize + index as usize * size_of(PESectionHeader)) as PESectionHeader*
}

fn resolve_rva(file: PEFile*, rva: u32): u32 {
    i: u16 = 0
    // This variable is here to work around bug #121
    address: u32 = $FFFF
    while i < file.header.number_of_sections {
        section :: get_section(file, i)
        if section.virtual_address <= rva && rva < section.virtual_address + section.size_of_raw_data {
            address = rva - section.virtual_address + section.pointer_to_raw_data
        }
        i += 1
    }
    if address == $FFFF {
        panic("failed to resolve RVA")
    }
    address
}

fn count_set_bits(num: u64): u64 {
    count_set_bits_before(num, 64)
}
fn count_set_bits_before(num: u64, bit: u64): u64 {
    i: u64 = 0
    num_set: u64 = 0
    while i < bit {
        if (num & (1 << i)) != 0 {
            num_set += 1
        }
        i += 1
    }
    num_set
}

DynamicParser :: struct {
    file: PEFile*
    cursor: u32
}

fn parser(file: PEFile*, begin: u32): DynamicParser {
    DynamicParser {
        file: file
        cursor: begin
    }
}

fn parse_u16(self: DynamicParser *mut): u16 {
    val :: *((self.file.image.data as usize + self.cursor as usize) as u16*)
    self.cursor += size_of(u16) as u32
    val
}
fn parse_u32(self: DynamicParser *mut): u32 {
    val :: *((self.file.image.data as usize + self.cursor as usize) as u32*)
    self.cursor += size_of(u32) as u32
    val
}

fn parse_string_heap_index(self: DynamicParser *mut): u32 {
    if (self.file.md_tables_start.heap_sizes & 1) != 0 {
        parse_u32(self)
    } else {
        parse_u16(self) as u32
    }
}
fn parse_guid_heap_index(self: DynamicParser *mut): u32 {
    if (self.file.md_tables_start.heap_sizes & 2) != 0 {
        parse_u32(self)
    } else {
        parse_u16(self) as u32
    }
}
fn parse_blob_heap_index(self: DynamicParser *mut): u32 {
    if (self.file.md_tables_start.heap_sizes & 4) != 0 {
        parse_u32(self)
    } else {
        parse_u16(self) as u32
    }
}
MODULE_TABLE: u32 : $00
TYPEREF_TABLE: u32 : $01
TYPEDEF_TABLE: u32 : $02
FIELD_TABLE: u32 : $04
METHODDEF_TABLE: u32 : $06
MODULEREF_TABLE: u32 : $1A
TYPESPEC_TABLE: u32 : $1B
ASSEMBLYREF_TABLE: u32 : $23

// Returns the number of rows in the table with the given index
fn get_size_of_table(self: DynamicParser*, index: u32): u32 {
    if (self.file.md_tables_start.valid & (1 << (index as u64))) == 0 {
        0
    } else {
        index :: count_set_bits_before(self.file.md_tables_start.valid, index as u64) as u32
        location :: self.file.md_tables_start.first_row_location + index * 4
        read_u32(self.file.image, location)
    }
}
fn max(a: u32, b: u32): u32 {
    if a < b {
        b
    } else {
        a
    }
}

ResolutionScopeTag :: enum {
    module
    module_ref
    assembly_ref
    type_ref
}
ResolutionScope :: struct {
    tag: ResolutionScopeTag
    index: u32
}
fn parse_resolution_scope(self: DynamicParser *mut): ResolutionScope {
    // TODO: compute this once and save it somewhere
    max_size :: max(
        max(
            max(
                get_size_of_table(self, MODULE_TABLE)
                get_size_of_table(self, MODULEREF_TABLE)
            )
            get_size_of_table(self, ASSEMBLYREF_TABLE)
        )
        get_size_of_table(self, TYPEREF_TABLE)
    )

    coded_index :: if max_size < 1 << (16 - 2) {
        // Narrow
        parse_u16(self) as u32
    } else {
        // Wide
        parse_u32(self)
    }

    ResolutionScope {
        tag: switch coded_index & 3 {
            0: ResolutionScopeTag.module
            1: ResolutionScopeTag.module_ref
            2: ResolutionScopeTag.assembly_ref
            3: ResolutionScopeTag.type_ref
            _: panic("unreachable")
        }
        index: coded_index >> 2
    }
}

TypeDefOrRefTag :: enum {
    type_def
    type_ref
    type_spec
}
TypeDefOrRef :: struct {
    tag: TypeDefOrRefTag
    index: u32
}
fn parse_type_def_or_ref(self: DynamicParser *mut): TypeDefOrRef {
    // TODO: compute this once and save it somewhere
    max_size :: max(
        max(
            get_size_of_table(self, TYPEDEF_TABLE)
            get_size_of_table(self, TYPEREF_TABLE)
        )
        get_size_of_table(self, TYPESPEC_TABLE)
    )

    coded_index :: if max_size < 1 << (16 - 2) {
        // Narrow
        parse_u16(self) as u32
    } else {
        // Wide
        parse_u32(self)
    }

    TypeDefOrRef {
        tag: switch coded_index & 3 {
            0: TypeDefOrRefTag.type_def
            1: TypeDefOrRefTag.type_ref
            2: TypeDefOrRefTag.type_spec
            3: panic("invalid tag")
            _: panic("unreachable")
        }
        index: coded_index >> 2
    }
}
fn parse_index_to_table(self: DynamicParser *mut, table_index: u32): u32 {
    size :: get_size_of_table(self, table_index)

    if size < 1 << 16 {
        // Narrow
        parse_u16(self) as u32
    } else {
        // Wide
        parse_u32(self)
    }
}
fn main() {
    metadata := read_file("external/win32metadata/Windows.Win32.winmd")
    
    signature_location :: read_u32(metadata, $3c)
    if read_byte(metadata, signature_location) != "P" || read_byte(metadata, signature_location+1) != "E" || read_byte(metadata, signature_location+2) != 0 || read_byte(metadata, signature_location+3) != 0 {
        panic("Invalid PE signature. Exiting.")
    }
    pe_header_location :: signature_location + 4
    // TODO: reverse endianness when running on a big-endian CPU
    header :: read_pe_header(metadata, pe_header_location)
    if header.machine != $14c {
        panic("Invalid machine number in PE file header. Exiting.")
    }
    if header.optional_header_size as usize != size_of(PEOptionalHeader) {
        panic("Invalid optional header size. Exiting.")
    }

    pe_optional_header_location :: pe_header_location + size_of(PEHeader) as u32
    optional_header :: read_pe_optional_header(metadata, pe_optional_header_location)
    if optional_header.magic != $10b {
        panic("Invalid PE optional header magic")
    }
    sections_location :: pe_optional_header_location + size_of(PEOptionalHeader) as u32
    first_section_header :: read_pe_section_header(metadata, sections_location)
    file := PEFile {
        image: metadata
        header: header
        optional_header: optional_header
        sections: first_section_header
        cli_header: 0 as usize as CLIHeader*,
        md_root: MDRoot {
            part1: 0 as usize as MDRootPart1*
            version: 0 as usize as u8*
            part2: 0 as usize as MDRootPart2*
            streams: 0 as u32
        }
        strings_header: no_stream()
        user_strings_header: no_stream()
        blob_header: no_stream()
        guid_header: no_stream()
        md_tables_header: no_stream()
        md_tables_start: MDTablesStart {
            reserved1: 0
            major_version: 0
            minor_version: 0
            heap_sizes: 0
            reserved2: 0
            valid: 0
            sorted: 0
            first_row_location: 0
        }
        md_tables_begin_location: 0
    }
    cli_location :: resolve_rva(&file, file.optional_header.cli_header.rva)
    file.cli_header = read_cli_header(metadata, cli_location)
    md_root_location :: resolve_rva(&file, file.cli_header.meta_data.rva)
    file.md_root = read_metadata_root(metadata, md_root_location)
    if file.md_root.part1.signature != $424a5342 {
        panic("invalid metadata magic signature")
    }
    i: u16 = 0
    cursor := file.md_root.streams
    while i < file.md_root.part2.number_of_streams {
        stream_header :: read_md_stream_header(file.image, cursor)
        // TODO: handle duplicate stream headers, I guess
        // TODO: switching on strings
        if strequals(stream_header.name, "#~") {
            file.md_tables_header = stream_header
            print("Found table stream header\n")
        } else if strequals(stream_header.name, "#Strings") {
            file.strings_header = stream_header
            print("Found strings stream header\n")
        } else if strequals(stream_header.name, "#US") {
            file.user_strings_header = stream_header
            print("Found user strings stream header\n")
        } else if strequals(stream_header.name, "#Blob") {
            file.blob_header = stream_header
            print("Found blob stream header\n")
        } else if strequals(stream_header.name, "#GUID") {
            file.guid_header = stream_header
            print("Found GUID stream header\n")
        }
        next_md_stream_header(stream_header, &mut cursor)
        i += 1
    }

    if file.md_tables_header.size == 0 {
        panic("Non-existent metadata header")
    }
    // Read #~ stream
    md_tables_start_location :: file.md_tables_header.offset + md_root_location
    file.md_tables_start = read_md_tables_start(file.image, md_tables_start_location)
    if file.md_tables_start.reserved1 != 0 || file.md_tables_start.reserved2 != 1 {
        panic("unexpected reserved value in metadata tables start")
    }

    num_present_tables :: count_set_bits(file.md_tables_start.valid)
    file.md_tables_begin_location = file.md_tables_start.first_row_location + (num_present_tables * 4) as u32
    string_heap_location :: file.strings_header.offset + md_root_location
    parser := parser(&file, file.md_tables_begin_location)
    i: u64 = 0
    present_i: u32 = 0
    
    while i < 64 {
        if (file.md_tables_start.valid & (1 << i)) != 0 {
            num_rows_location :: file.md_tables_start.first_row_location + present_i * 4
            num_rows :: *((file.image.data as usize + num_rows_location as usize) as u32*)
            switch i {
                $00: { // Module
                    print("Module table:\n")
                    j: u32 = 0
                    while j < num_rows {
                        print("  Module entry ")
                        print_num(j as u64 + 1)
                        print(":\n")
                        generation :: parse_u16(&mut parser)
                        print("    Generation: ")
                        print_num(generation as u64)
                        print("\n")
                        name :: parse_string_heap_index(&mut parser)
                        print("    Name: ")
                        print((file.image.data as usize + (string_heap_location as u32 + name) as usize) as u8*)
                        print("\n")
                        mvid :: parse_guid_heap_index(&mut parser)
                        print("    Mvid: ")
                        print_num(mvid as u64)
                        print("\n")
                        enc_id :: parse_guid_heap_index(&mut parser)
                        print("    EncId: ")
                        print_num(enc_id as u64)
                        print("\n")
                        enc_base_id :: parse_guid_heap_index(&mut parser)
                        print("    EncBaseId: ")
                        print_num(enc_base_id as u64)
                        print("\n")
                        j += 1
                    }
                }
                $01: {
                    SKIP_MOST_TYPEREFS :: true
                    print("TypeRef table:\n")
                    j: u32 = 0
                    num_rows := num_rows
                    while j < num_rows {
                        print("  TypeRef entry ")
                        print_num(j as u64 + 1)
                        print(":\n")
                        initial_cursor :: parser.cursor
                        resolution_scope :: parse_resolution_scope(&mut parser)
                        print("    ResolutionScope: ")
                        switch resolution_scope.tag {
                            .module: print("Module"),
                            .module_ref: print("ModuleRef"),
                            .assembly_ref: print("AssemblyRef"),
                            .type_ref: print("TypeRef")
                        }
                        print("(")
                        print_num(resolution_scope.index as u64)
                        print(")\n")
                        type_name :: parse_string_heap_index(&mut parser)
                        print("    TypeName: ")
                        print((file.image.data as usize + (string_heap_location as u32 + type_name) as usize) as u8*)
                        print("\n")
                        type_namespace :: parse_string_heap_index(&mut parser)
                        print("    TypeNamespace: ")
                        print((file.image.data as usize + (string_heap_location as u32 + type_namespace) as usize) as u8*)
                        print("\n")
                        row_size :: parser.cursor - initial_cursor
                        if SKIP_MOST_TYPEREFS {
                            print("  Skipping the rest of the TypeRefs!\n")
                            parser.cursor = initial_cursor + row_size * num_rows
                            // TODO: break expression
                            num_rows = 0
                        }
                        j += 1
                    }
                }
                $02: {
                    print("TypeDef table:\n")
                    j: u32 = 0
                    num_rows: u32 = 2
                    while j < num_rows {
                        print("  TypeDef entry ")
                        print_num(j as u64 + 1)
                        print(":\n")
                        flags :: parse_u32(&mut parser)
                        print("    Flags: ")
                        print_num(flags as u64)
                        print("\n")
                        type_name :: parse_string_heap_index(&mut parser)
                        print("    TypeName: ")
                        print((file.image.data as usize + (string_heap_location as u32 + type_name) as usize) as u8*)
                        print("\n")
                        type_namespace :: parse_string_heap_index(&mut parser)
                        print("    TypeNamespace: ")
                        print((file.image.data as usize + (string_heap_location as u32 + type_namespace) as usize) as u8*)
                        print("\n")
                        extends :: parse_type_def_or_ref(&mut parser)
                        print("    Extends: ")
                        switch extends.tag {
                            .type_def: print("TypeDef"),
                            .type_ref: print("TypeRef"),
                            .type_spec: print("TypeSpec"),
                        }
                        print("(")
                        print_num(extends.index as u64)
                        print(")\n")
                        field_list :: parse_index_to_table(&mut parser, FIELD_TABLE)
                        print("    FieldList: ")
                        print_num(field_list as u64)
                        print("\n")
                        method_list :: parse_index_to_table(&mut parser, METHODDEF_TABLE)
                        print("    MethodList: ")
                        print_num(method_list as u64)
                        print("\n")
                        j += 1
                    }
                }
                default: {
                    print("unhandled table ")
                    print_num(i)
                    panic()
                }
            }
            present_i += 1
        }
        i += 1
    }

    free_slice(&mut metadata)
}



// Library code.
ByteSlice :: struct {
    size: usize
    data: u8 *mut
}

fn new_slice(size: usize): ByteSlice {
    ByteSlice {
        size: size
        data: malloc(size) as u8 *mut
    }
}

fn read_file(path: i8*): ByteSlice {
    file :: kernel32.CreateFileA(path, GENERIC_READ, FILE_SHARE_READ, 0 as usize as SECURITY_ATTRIBUTES *mut, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 as usize as HANDLE)
    invalid :: -1 as isize as usize as HANDLE
    if file as usize == _debug_mark(INVALID_HANDLE_VALUE()) as usize {
        panic("unable to open file")
    }

    size := 0 as u64
    succ :: kernel32.GetFileSizeEx(file, &mut size)
    if succ == FALSE {
        panic("unable to get file size")
    }

    size :: size as usize
    buf :: malloc(size)

    i := 0 as usize
    while i < size {
        bytes_to_read :: (size - i) as DWORD
        bytes_read := 0 as DWORD
        succ :: kernel32.ReadFile(file, (buf as usize + i) as void *mut, bytes_to_read, &mut bytes_read, 0 as usize as OVERLAPPED *mut)
        if succ == FALSE {
            panic("unable to read from file")
        }
        i += bytes_read as usize
    }
    ignore :: kernel32.CloseHandle(file)

    ByteSlice {
        size: size
        data: buf as u8 *mut
    }
}

fn write_byte(slice: ByteSlice, index: u32, value: u8) {
    *((slice.data as usize + index as usize) as u8 *mut) = value
}

fn read_byte(slice: ByteSlice, index: u32): u8 {
    *((slice.data as usize + index as usize) as u8*)
}
fn read_u32(slice: ByteSlice, index: u32): u32 {
    *((slice.data as usize + index as usize) as u32*)
}

// TODO: This function doesn't work yet, unfortunately
fn read_as[T](slice: ByteSlice, index: u32): T {
    if index as usize + size_of(T) > slice.size {
        panic("index off the end")
    }
    *((slice.data as usize + index as usize) as T*)
}
fn read_pe_header(slice: ByteSlice, index: u32): PEHeader* {
    if index as usize + size_of(PEHeader) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as PEHeader*)
}
fn read_pe_optional_header(slice: ByteSlice, index: u32): PEOptionalHeader* {
    if index as usize + size_of(PEOptionalHeader) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as PEOptionalHeader*)
}
fn read_pe_section_header(slice: ByteSlice, index: u32): PESectionHeader* {
    if index as usize + size_of(PESectionHeader) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as PESectionHeader*)
}
fn read_cli_header(slice: ByteSlice, index: u32): CLIHeader* {
    if index as usize + size_of(CLIHeader) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as CLIHeader*)
}
fn read_md_root_part_1(slice: ByteSlice, index: u32): MDRootPart1* {
    if index as usize + size_of(MDRootPart1) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as MDRootPart1*)
}
fn read_md_root_part_2(slice: ByteSlice, index: u32): MDRootPart2* {
    if index as usize + size_of(MDRootPart2) > slice.size {
        panic("index off the end")
    }
    ((slice.data as usize + index as usize) as MDRootPart2*)
}
fn read_metadata_root(slice: ByteSlice, index: u32): MDRoot {
    part1 :: read_md_root_part_1(slice, index)
    version :: (slice.data as usize + index as usize + size_of(MDRootPart1)) as u8*
    part2 :: read_md_root_part_2(slice, index + size_of(MDRootPart1) as u32 + part1.length as u32)
    MDRoot {
        part1: part1
        version: version
        part2: part2
        streams: index + size_of(MDRootPart1) as u32 + part1.length + size_of(MDRootPart2) as u32
    }
}
fn read_md_tables_start(slice: ByteSlice, index: u32): MDTablesStart {
    if index as usize + size_of(MDTablesStart) > slice.size {
        panic("index off the end")
    }
    start := *((slice.data as usize + index as usize) as MDTablesStart*)
    start.first_row_location = index + + offset_of(MDTablesStart, "first_row_location") as u32
    start
}
fn next_multiple_of_4_exclusive(num: u32): u32 {
    num := num + 1
    while num % 4 != 0 {
        num += 1
    }
    num
}
fn strlen(str: u8*): usize {
    cursor := str as usize
    while *(cursor as u8*) != 0 {
        cursor += 1
    }
    cursor - str as usize
}
fn strequals(l: u8*, r: u8*): bool {
    l_len :: strlen(l)
    r_len :: strlen(r)
    if l_len != r_len { return false }
    l_cursor := l as usize
    r_cursor := r as usize
    while *(l_cursor as u8*) == *(r_cursor as u8*) && *(l_cursor as u8*) != 0 {
        l_cursor += 1
        r_cursor += 1
    }
    l_cursor - l as usize == l_len
}
fn next_md_stream_header(stream_header: MDStreamHeader, offset: u32 *mut) {
    ptr := stream_header.name as usize
    *offset += 8
    while *(ptr as u8*) != 0 {
        ptr += 1
        *offset += 1
    }
    *offset = next_multiple_of_4_exclusive(*offset)
}
fn read_md_stream_header(slice: ByteSlice, index: u32): MDStreamHeader {
    // TODO: bounds checks
    MDStreamHeader {
        offset: *((slice.data as usize + index as usize) as u32*)
        size: *((slice.data as usize + index as usize + 4) as u32*)
        name: (slice.data as usize + index as usize + 8) as u8*
    }
}

fn free_slice(slice: ByteSlice *mut) {
    free(slice.data as void *mut)
    slice.data = 0 as usize as u8 *mut
    slice.size = 0
}

fn print_num(num: i64) {
    num := num
    if num < 0 {
        print("-")
        num = -num
    }
    if num >= 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

fn print_num(num: u64) {
    num := num
    if num >= 10 {
        print_num(num / 10)
    }
    print((num % 10) as u8 + "0")
}

fn print_byte_recurse(num: u8, count: u8) {
    num := num
    if count < 1 {
        print_byte_recurse(num / 16, count + 1)
    }
    num = num % 16
    if num >= 10 {
        print(num as u8 - 10 + "A")
    } else {
        print(num as u8 + "0")
    }
}

fn print_byte(num: u8) {
    print("$")
    print_byte_recurse(num, 0)
}

fn print_word(num: u16) {
    print("$")
    print_byte_recurse((num >> 8) as u8, 0)
    print_byte_recurse(num as u8, 0)
}




// Windows FFI code. To be cleaned up later

HWND :: void *mut
HANDLE :: void *mut

MB_OK :: 0 as u32
FILE_SHARE_READ :: 1 as DWORD

fn INVALID_HANDLE_VALUE(): HANDLE {
    -1 as isize as usize as HANDLE
}
DWORD :: u32
STD_INPUT_HANDLE :: (-10) as i32 as DWORD
STD_OUTPUT_HANDLE :: (-11) as i32 as DWORD
STD_ERROR_HANDLE :: (-12) as i32 as DWORD
BOOL :: i32
TRUE :: 1
FALSE :: 0

GENERIC_READ :: 2147483648 as DWORD
GENERIC_WRITE :: 1073741824 as DWORD

CREATE_ALWAYS :: 2 as DWORD
CREATE_NEW :: 1 as DWORD
OPEN_ALWAYS :: 4 as DWORD
OPEN_EXISTING :: 3 as DWORD
TRUNCATE_EXISTING :: 5 as DWORD

FILE_ATTRIBUTE_NORMAL :: 128 as DWORD

// it is not currently possible to have constant pointers, which is why this is a function for now
fn NULL(): void *mut { 0 as usize as void *mut }

SECURITY_ATTRIBUTES :: struct {
    nLength: DWORD
    lpSecurityDescriptor: void *mut
    bInheritHandle: BOOL
}

OVERLAPPED :: struct {}

kernel32 :: extern_mod("kernel32.dll") {
    fn GetStdHandle(nStdHandle: DWORD): HANDLE
    fn WriteConsoleA(hConsoleOutput: HANDLE, lpBuffer: void*, nNumberOfCharsToWrite: DWORD, lpNumberOfCharsWritten: DWORD *mut, lpReserved: void *mut): BOOL
    fn ReadConsoleA(hConsoleInput: HANDLE, lpBuffer: void *mut, nNumberOfCharsToRead: DWORD, lpNumberOfCharsRead: DWORD *mut, pInputControl: void *mut): BOOL
    fn CreateFileA(lpFileName: i8*, dwDesiredAccess: DWORD, dwShareMode: DWORD, lpSecurityAttributes: SECURITY_ATTRIBUTES *mut, dwCreationDisposition: DWORD, dwFlagsAndAttributes: DWORD, hTemplateFile: HANDLE): HANDLE
    fn CloseHandle(hObject: HANDLE): BOOL
    fn GetFileSizeEx(hFile: HANDLE, lpFileSize: u64 *mut): BOOL
    fn ReadFile(hFile: HANDLE, lpBuffer: void *mut, nNumberOfBytesToRead: DWORD, lpNumberOfBytesRead: DWORD *mut, lpOverlapped: OVERLAPPED *mut): BOOL

    fn QueryPerformanceCounter(lpPerformanceCount: u64 *mut): BOOL
    fn QueryPerformanceFrequency(lpFrequency: u64 *mut): BOOL
}

user32 :: extern_mod("user32.dll") {
    fn MessageBoxA(hwnd: HWND, lpText: i8*, lpCaption: i8*, uType: u32): i32
}


/* POC for a way to generate FFI bindings at compile time, that actually seems somewhat feasible in the short term:
windows :: do {
    module := compiler.new_module_builder()
    parameters := compiler.new_parameter_buffer()
    parameters.add("nStdHandle", DWORD)
    module.add_extern_prototype("GetStdHandle", parameters, HANDLE, ExternSource.dll("kernel32.dll"))
    module.build()
}*